clc; close all; clearvars;

% Load experimental data
load('/home/mark/NMR Data/XmX processing/raw data/peak_B_FA_10.mat','peaks','TR_vals');

% Define constants (all quantities in Hz and seconds)
R1 = 1/11.54; % Longitudinal relaxation rate
FLIP = deg2rad(10); % Flip angle
skip_points = 8; % points to omit from fitting
peak_choose = 'B';

% Acquisition time range
Tacqmin = min(TR_vals(skip_points:end))*1e-3; Tacqmax = max(TR_vals(skip_points:end))*1e-3; NTacq = numel(TR_vals(skip_points:end)) - 1;
dTacq = (Tacqmax - Tacqmin)/NTacq;
Tacq1 = Tacqmin:dTacq:Tacqmax;

% Setting initial signal and skipping points
My_0 = peaks(skip_points:end);

function My=My_func(M0,kex,TR,FLIP,E1,E2,omega)
    
    My = (M0*exp(TR.*(kex-M0*kex)).*sin(FLIP).*(E1-1).*...
    (E1.*exp(2*M0*TR*kex).*cos(FLIP)...
    -exp(TR*kex).*exp(2*M0*TR*kex)...
    -E2.^2.*exp(TR*kex).*cos(TR.*omega).^2.*cos(FLIP)...
    -E2.^2.*exp(TR*kex).*sin(TR.*omega).^2.*cos(FLIP)...
    +E1.*E2.^2.*cos(TR.*omega).^2.*cos(FLIP).^2 ...
    +E1.*E2.^2.*cos(TR.*omega).^2.*sin(FLIP).^2 ...
    +E1.*E2.^2.*sin(TR.*omega).^2.*cos(FLIP).^2 ...
    +E1.*E2.^2.*sin(TR.*omega).^2.*sin(FLIP).^2 ...
    +E2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega)...
    +E2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP)...
    -E1.*E2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^2 ...
    -E1.*E2.*exp(M0*TR*kex).*cos(TR.*omega).*sin(FLIP).^2 ...
    -E1.*E2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP)))./...
    (exp(TR*kex).*exp(2*M0*TR*kex).*exp(TR.*(kex-M0*kex))...
    -E1.*exp(2*M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(FLIP)...
    +E1.^2.*E2.*exp(2*M0*TR*kex).*cos(FLIP).^3 ...
    -E1.*E2.^3.*cos(TR.*omega).^2.*cos(FLIP).^3 ...
    -E1.*E2.^3.*sin(TR.*omega).^2.*cos(FLIP).^3 ...
    +E2.^3.*exp(TR*kex).*cos(TR.*omega).^2.*cos(FLIP).^2 ...
    +E2.^3.*exp(TR*kex).*sin(TR.*omega).^2.*cos(FLIP).^2 ...
    +E1.^2.*E2.^3.*cos(TR.*omega).^2.*cos(FLIP).^4 ...
    +E2.*exp(TR*kex).*exp(2*M0*TR*kex).*cos(FLIP)...
    +E1.^2.*E2.^3.*cos(TR.*omega).^2.*sin(FLIP).^4 ...
    +E1.^2.*E2.^3.*sin(TR.*omega).^2.*cos(FLIP).^4 ...
    +E1.^2.*E2.^3.*sin(TR.*omega).^2.*sin(FLIP).^4 ...
    -E1.*E2.*exp(2*M0*TR*kex).*cos(FLIP).^2 ...
    -E1.*E2.*exp(2*M0*TR*kex).*sin(FLIP).^2 ...
    +E1.^2.*exp(2*M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(FLIP).^2 ...
    -E1.*E2.^3.*sin(TR.*omega).^2.*cos(FLIP).*sin(FLIP).^2 ...
    -E1.^2.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^3 ...
    -E1.^2.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^4 ...
    +E2.^2.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*cos(FLIP)...
    -E1.^2.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*sin(FLIP).^4 ...
    +E1.*E2.*M0.*exp(2*M0*TR*kex).*sin(FLIP).^2 ...
    +E2.^2.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*cos(FLIP)...
    -E1.*E2.^2.*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*cos(FLIP).^2 ...
    -E1.*E2.^2.*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*cos(FLIP).^2 ...
    -E1.*E2.*exp(TR*kex).*exp(2*M0*TR*kex).*cos(FLIP).^2 ...
    -E2.*exp(TR*kex).*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega)...
    -E2.^2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP)...
    +E1.^2.*E2.^2.*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*cos(FLIP).^3 ...
    -E1.*exp(TR*kex).*exp(2*M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(FLIP)...
    +E1.^2.*E2.^2.*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*cos(FLIP).^3 ...
    +E1.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^2 ...
    +E1.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^3 ...
    +2*E1.^2.*E2.^3.*cos(TR.*omega).^2.*cos(FLIP).^2.*sin(FLIP).^2 ...
    +E1.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*sin(FLIP).^2 ...
    -E1.*E2.^3.*exp(TR*kex).*cos(TR.*omega).^2.*cos(FLIP).^3 ...
    +2*E1.^2.*E2.^3.*sin(TR.*omega).^2.*cos(FLIP).^2.*sin(FLIP).^2 ...
    -E1.*E2.^3.*exp(TR*kex).*sin(TR.*omega).^2.*cos(FLIP).^3 ...
    +E1.^2.*E2.*exp(2*M0*TR*kex).*cos(FLIP).*sin(FLIP).^2 ...
    -E2.^2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^2 ...
    -E1.*E2.^3.*cos(TR.*omega).^2.*cos(FLIP).*sin(FLIP).^2 ...
    -E1.*E2.^2.*M0.*exp(M0*TR*kex).*cos(TR.*omega).*sin(FLIP).^2 ...
    -2*E1.^2.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^2.*sin(FLIP).^2 ...
    -E2.*exp(TR*kex).*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP)...
    +E1.*E2.^2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^2 ...
    +E1.*E2.^2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).^3 ...
    +E1.*E2.*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP).^2 ...
    +E1.^2.*E2.^2.*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*cos(FLIP).*sin(FLIP).^2 ...
    +E1.^2.*E2.^2.*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*cos(FLIP).*sin(FLIP).^2 ...
    +E1.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).*sin(FLIP).^2 ...
    -E1.*E2.^3.*exp(TR*kex).*cos(TR.*omega).^2.*cos(FLIP).*sin(FLIP).^2 ...
    -E1.*E2.^3.*exp(TR*kex).*sin(TR.*omega).^2.*cos(FLIP).*sin(FLIP).^2 ...
    -E1.*E2.^2.*M0.*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*sin(FLIP).^2 ...
    -E1.*E2.^2.*M0.*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*sin(FLIP).^2 ...
    -E1.*E2.*M0.*exp(TR*kex).*exp(2*M0*TR*kex).*sin(FLIP).^2 ...
    -E1.^2.*E2.*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP).^2 ...
    -E1.^2.*E2.*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP).^3 ...
    -E1.*E2.^2.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*cos(FLIP).^2 ...
    -E1.^2.*E2.^2.*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).*sin(FLIP).^2 ...
    -E1.*E2.^2.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*sin(FLIP).^2 ...
    -E1.*E2.^2.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*cos(FLIP).^2 ...
    -E1.*E2.^2.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*sin(FLIP).^2 ...
    +E1.*E2.*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP)...
    +E1.*E2.^2.*M0.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).^2.*sin(FLIP).^2 ...
    +E1.*E2.^2.*M0.*exp(TR*kex).*exp(TR.*(kex-M0*kex)).*sin(TR.*omega).^2.*sin(FLIP).^2 ...
    -E1.^2.*E2.*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP).*sin(FLIP).^2 ...
    +E1.*E2.*exp(TR*kex).*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP)...
    +E1.*E2.^2.*M0.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*sin(FLIP).^2 ...
    +E1.*E2.*M0.*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*sin(FLIP).^2 ...
    +E1.*E2.*exp(TR*kex).*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*cos(FLIP).^2 ...
    +E1.*E2.*exp(TR*kex).*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*sin(FLIP).^2 ...
    +E1.*E2.^2.*exp(TR*kex).*exp(M0*TR*kex).*cos(TR.*omega).*cos(FLIP).*sin(FLIP).^2 ...
    -E1.*E2.*M0.*exp(TR*kex).*exp(M0*TR*kex).*exp(TR.*(kex-M0*kex)).*cos(TR.*omega).*sin(FLIP).^2);
end

% Objective function for least squares
function residuals = objective_function(params, Tacq1, My_0, R1, FLIP, peak_choose)
    kex = params(1); % Exchange rate
    Pa = params(2); % Population of on-resonance state
    Delta_AB1 = params(3); % Chemical shift difference
    R2g = params(4);
    residuals = zeros(length(Tacq1), 1);

    TR=Tacq1;
    nu_onres=-1./(2*TR); % Chemical shift of on-resonance peak
    switch upper(peak_choose)
        case 'A'
            nu_offres=nu_onres + Delta_AB1; % Chemical shift of off-resonance peak
        case 'B'
            nu_offres=nu_onres - Delta_AB1; % Chemical shift of off-resonance peak
    end
    
    nu_onres=-nu_onres;
    nu_offres=-nu_offres;
    omega_onres=2*pi*nu_onres;
    omega_offres=2*pi*nu_offres;
    E1=exp(-R1*TR);
    E2=exp(-R2g*TR);
    M0_onres=Pa;
    M0_offres=1-M0_onres;
    
    % Theoretical signal (same as original)
    My=My_func(M0_onres,kex,TR,FLIP,E1,E2,omega_offres);
    
    % Normalize theoretical signal to match experimental scaling
    scale_factor=mean(My_0./My);
    My1=My*scale_factor;
    residuals=My1-My_0;
end

% Initial guess and bounds for [kex, Pa, Delta_AB1]
x0 = [2.46, 0.2, 469.81, 2]; % Initial guess: kex = 5 s^-1, Pa = 0.5, Delta_AB1 = 467 Hz, R2 = 4 s^-1
lb = [0.1, 0.1, 469.81, 1]; % Lower bounds
ub = [6, 0.99, 469.81, 5]; % Upper bounds

% Perform least squares optimization
options = optimoptions('lsqnonlin', 'Display', 'iter', 'MaxIterations', 1000);
[params_opt, resnorm] = lsqnonlin(@(params) objective_function(params, Tacq1, My_0, R1, FLIP, peak_choose), x0, lb, ub, options);
residuals = objective_function(params_opt, Tacq1, My_0, R1, FLIP, peak_choose);

% Extract optimized parameters
kex_opt = params_opt(1);
pa_opt = params_opt(2);
cs_opt = params_opt(3);
R2_opt = params_opt(4);

% Compute theoretical signal with optimized parameters for plotting
My1_opt=zeros(length(Tacq1),1);
TR=Tacq1; % Use the entire vector
nu_onres=-1./(2*TR); % Chemical shift of on-resonance peak

switch upper(peak_choose)
    case 'A'
        nu_offres=nu_onres + cs_opt; % Chemical shift of off-resonance peak
    case 'B'
        nu_offres=nu_onres - cs_opt; % Chemical shift of off-resonance peak
end

nu_onres=-nu_onres;
nu_offres=-nu_offres;
omega_onres=2*pi*nu_onres;
omega_offres=2*pi*nu_offres;
E1=exp(-R1*TR);
E2=exp(-R2_opt*TR);
M0_onres=pa_opt;
M0_offres=1-M0_onres;

My1_opt=My_func(M0_onres,kex_opt,TR,FLIP,E1,E2,omega_offres);
scale_factor=mean(My_0./My1_opt);
My1_opt=My1_opt*scale_factor;

% Residuals error
err = 0.05*abs(My_0);


% Display optimized parameters
fprintf('kex_opt = %.3f s^-1\n', kex_opt);
fprintf('pa_opt = %.3f\n', pa_opt);
fprintf('cs_opt = %.3f Hz\n', cs_opt);
fprintf('R2_opt = %.3f s^-1\n', R2_opt);
fprintf('Residual norm = %.4f\n', resnorm);
fprintf('RMSE = %.4f\n', sqrt(resnorm/NTacq));

% Plot experimental and fitted data
figure
plot(Tacq1*1e3, real(My_0), 'b-', 'LineWidth', 2, 'DisplayName', 'Experimental')
hold on
plot(Tacq1*1e3, My1_opt, 'r--', 'LineWidth', 2, 'DisplayName', 'Fitted')
ylabel('Signal Intensity')
xlabel('Tacq [ms]')
ylim([0,0.15])
legend;
title(['Fit ',peak_choose,': kex = ' num2str(kex_opt, '%.3f') ' s^-1, Pa = ' num2str(pa_opt, '%.3f') ', \Delta\nu_{AB} = ' num2str(cs_opt, '%.3f') ' Hz,', ...
       ' R2 = ' num2str(R2_opt, '%.3f'),' s^-1'])
ax = gca; ax.FontSize = 12;

% Residuals plot
figure
hold on
errorbar(TR*1e3,residuals,err,'o','MarkerSize',6,'CapSize',8,'LineWidth',1);
yline(0, '--k', 'LineWidth', 1);
ylabel('Residuals')
xlabel('Tacq [ms]')
ylim([-0.05,0.05])
ax = gca; ax.FontSize = 12;

